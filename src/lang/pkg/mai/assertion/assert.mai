package assertion

class Assert(
	val expectValue: any,
	val desc: string
)

class AssertFailException(message: string, cause: Exception): Exception(message, cause)

implements Assert {

fun isEqualTo(actualValue: any): Assert {
	val code = "equalTo"
	when (self.expectValue) {
		value: i8 -> {
			self.assertValue(actualValue is i8, actualValue, code)
    		self.assertValue(value == actualValue as i8, actualValue, code)			
		}
		value: u8 -> {
			self.assertValue(actualValue is u8, actualValue, code)
    		self.assertValue(value == actualValue as u8, actualValue, code)			
		}
		value: int -> {
			self.assertValue(actualValue is int, actualValue, code)
    		self.assertValue(value == actualValue as int, actualValue, code)
		}
		value: string -> {
			self.assertValue(actualValue is string, actualValue, code)
    		self.assertValue(value == actualValue as string, actualValue, code)
		}
		else -> {}
	}
    return self
}

fun isLessThan(actualValue: any): Assert {
	val code = "lessThan"
	when (self.expectValue) {
		value: int -> {
			self.assertValue(actualValue is int, actualValue, code)
    		self.assertValue(value < actualValue as int, actualValue, code)
		}
		value: string -> {
			self.assertValue(actualValue is string, actualValue, code)
    		self.assertValue(value < actualValue as string, actualValue, code)
		}
		else -> {}
	}
	return self
}

fun isGreaterThan(actualValue: any): Assert {
	val code = "greaterThan"
	when (self.expectValue) {
		value: int -> {
			self.assertValue(actualValue is int, actualValue, code)
    		self.assertValue(value > actualValue as int, actualValue, code)
		}
		value: string -> {
			self.assertValue(actualValue is string, actualValue, code)
    		self.assertValue(value > actualValue as string, actualValue, code)
		}
		else -> {}
	}
	return self
}

fun assertValue(ok: bool, actualValue: any, message: string) {
	if (!ok) {
		throw AssertFailException("[FAIL] $message: unexpected ${self.expectValue}, actual is $actualValue", nil)
	}
}

} // implements Assert

fun assertThat(expectValue: any): Assert {
    return Assert(expectValue, "")
}
