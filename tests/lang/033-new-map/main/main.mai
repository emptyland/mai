package main

fun main() {
    newMapSanity()
    newStringKeyMap()
    newF32KeyMap()
    newStringKeyIntValueMap()
}

fun newMapSanity() {
    val m = map[string,int](0)
    assert(m.length == 0u, "fail ${m.length}")
    assert(m['1'] == 0, "fail ${m['1']}")
    assert(m['2'] == 0, "fail ${m['2']}")
}

fun newStringKeyMap() {
    val m = map{'1st'->1, '2nd'->2, '3rd'->3}
    assert(m.length == 3u, "fail ${m.length}")
    assert(m['1st'] == 1, "fail ${m['1st']}")
    assert(m['2nd'] == 2, "fail ${m['2nd']}")
    assert(m['3rd'] == 3, "fail ${m['3rd']}")
    assert(m['4th'] == 0, "fail ${m['4th']}")
}

fun newF32KeyMap() {
    val m = map {
        1.0 -> '1st',
        2.34 -> '2nd',
        3.14 -> '3rd',
        4.44 -> '4th'
    }
    assert(m.length == 4u, "fail ${m.length}")
    assert(m[1.0] == '1st', "fail ${m[1.0]}")
    assert(m[4.44] == '4th', "fail ${m[4.44]}")
    assert(!m.containsKey(5.5), "fail")
}

fun newStringKeyIntValueMap() {
    val m = map {
        'aaa' -> 1,
        'bbb' -> 2,
        'bbc' -> 3,
        'aac' -> 4,
        'bilibili' -> 5,
        'ccc' -> 6
    }
    assert(m.length == 6u, "fail ${m.length}")
    assert(m['bilibili'] == 5, "fail ${m['bilibili']}")
    m['bilibili'] = -1
    assert(m['bilibili'] == -1, "fail ${m['bilibili']}")
}